---
title: "Package Overview"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Package Overview}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  warning = FALSE
)
```

In this article we will provide a worked example of using the functions within the `satpoint` package to process netCDF files. First, we will load some packages that will help with the process.

```{r setup}
library(tidyverse)
library(satpoint)
```

## netCDF files to process

If you are unsure how we can obtain netCDF files please see `vignette("download-netcdf", package = "satpoint")`. We will use the files downloaded there for this example.

```{r}
nc_files <- list.files(pattern = ".nc4")
head(nc_files)
```

## The Process

### Sites

The `satpoint` package is designed to assist in extracting values from netCDF files for particular areas. These areas can be predefined by a user but we included a helper function to create *buffers* around particular points, for example locations of fish farms. In this example we construct a set of fake site locations,

```{r}
sites <- tibble(
  site = LETTERS[1:4],
  longitude = c(-5.837704, -6.592514, -7.885055, -3.421410),
  latitude = c(57.607846, 57.291280, 56.900022, 58.187849)
)
sites
```

which we can plot just for reference purposes.

```{r site_map, echo = FALSE}
library(sf)
library(tmap)
scot <- read_sf("~/VSIU/shapefiles/scot")
sites_sf <- st_as_sf(sites, coords = c("longitude", "latitude"))
tm_shape(scot) +
  tm_polygons() +
  tm_shape(sites_sf) +
  tm_markers()
```

### Creating Buffer Zones

We can now create a set of circular buffers around these points, over which we will average the values from the netCDF files. To do this we use the `site_buffers()` function and specify that we want 10km, 15km and 20km buffers.

```{r}
buffers <- site_buffers(sites, x_coord = "longitude", y_coord = "latitude", crs = 4326, buffers = c(10, 15, 20))
buffers
```

As above, we can plot these buffers to demonstrate what has been created.

```{r buffer_map, echo = FALSE}
tm_shape(scot) +
  tm_polygons() +
  tm_shape(buffers) +
  tm_polygons(alpha = 0)
```

**Note:** If you are creating your own buffer zones, which do not have to be circular, the expectation is that the `buffers` data frame will have a unique row per buffer and these should have a unique identifier. In our case it is the *site* column.


### Extracting the Data

Now we have the buffers we can use the main package function `extract_site_grids_nc()` to extract all the data values. We'll do this for one file first, to demonstrate the inputs and the messages provided to help track the progress.

```{r, message = TRUE}
extract_site_grids_nc(nc_file = nc_files[1], site_buffers = buffers, nc_crs = 4326)
```

As you can see, we must provide an netCDF file to process, the buffers and the coordinate referencing system (CRS) that the netCDF file is making use of. The `extract_site_grids_nc()` function completes the following steps:

- open the netCDF file
- extract the date/time information from the file
- extract the geographic data from the file and establish which parts of the file intersect with the provided buffers
- extract the data from the netCDF file for the parts which intersect with the provided buffers

The result is a `tibble` with the *site*, *data value* (in the above example *precipitationCal*) and the *datetime*.

### Processing all files

To demonstrate processing multiple files, we'll use the `map2_dfr()` function to progress through all the input files and bind the results together.

```{r}
# Note that messages are hidden here to avoid a lot of repetition
precip <- map(nc_files, .f = extract_site_grids_nc,
              site_buffers = buffers, nc_crs = 4326) %>%
  list_rbind()
precip
```

We can then `summarise()` the results and produce a quick plot of them.

```{r final_plot}
sum_precip <- precip %>%
  separate_wider_delim(site, names = c("site", "buffer"), delim = "_") %>%
  group_by(site, buffer, datetime) %>%
  summarise(precipitationCal = mean(precipitationCal, na.rm = TRUE),
            .groups = "drop")

ggplot(sum_precip, aes(x = datetime, y = precipitationCal)) +
  geom_line(aes(col = buffer)) +
  geom_point() +
  facet_wrap(vars(site), ncol = 2)
```


## Additional Options

### Extracting Certain Dates

In the example above, each netCDF file only contained a single days worth of data. Other netCDF files can contain months or years worth of data. In those cases, a date or dates can be provided to the `extract_site_grids_nc()` function and only data for that date(s) will be returned. For example:

```{r, eval = FALSE}
# not run
extract_site_grids_nc(nc_file = nc_files[1], site_buffers = buffers, nc_crs = 4326,
                      dates_to_extract = c("2023-01-01", "2024-01-01"))
# or with a pre-defined sequence of dates
date_seq <- seq.Date(as.Date("2023-01-01"), as.Date("2023-01-04"), by = "day")
extract_site_grids_nc(nc_file = nc_files[1], site_buffers = buffers, nc_crs = 4326,
                      dates_to_extract = date_seq)
```

If a particular date(s), requested in `dates_to_extract` is not present in the data, a message will be printed out specifying the missing date(s).

## Extracting Certain Depths

Where a netCDF file has multiple depths, a (numerical) vector of depths to extract can be provide and then only these depths will be returned. If none of the depths provided match those in the file, all depths will be returned. 

For example - if the file contains depth values of 0, 5, 10 and 15 we can return only the first two values

```{r, eval = FALSE}
# not run
extract_site_grids_nc(nc_file = nc_files[1], site_buffers = buffers, nc_crs = 4326,
                      depths_to_extract = c(0, 5))
```

or just the value at 10m. 

```{r, eval = FALSE}
# not run
extract_site_grids_nc(nc_file = nc_files[1], site_buffers = buffers, nc_crs = 4326,
                      depths_to_extract = 10)
```


### Providing details on the variables to extract

By default `extract_site_grids_nc()` will try its best to figure out which variable to extract. However, if this can be specified via the

```{r}
extract_site_grids_nc(nc_file = nc_files[1], site_buffers = buffers, nc_crs = 4326,
                      nc_var_name = "precipitationCal")
```

Likewise, where a *depth* variable is present, the function will try to extract the details automatically but the variable name can also be extracted.

```{r, eval = FALSE}
# not run
extract_site_grids_nc(nc_file = nc_files[1], site_buffers = buffers, nc_crs = 4326,
                      nc_var_name = "precipitationCal", depth_var = "Depth")
```




